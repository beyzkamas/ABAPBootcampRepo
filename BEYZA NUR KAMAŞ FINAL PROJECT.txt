*&---------------------------------------------------------------------*
*& Report ZBK_FINAL_P004
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zbk_final_p004.

TABLES : zbk_patient_t001,
         zbk_visit_t001.

DATA: gt_data       TYPE STANDARD TABLE OF zbk_s_001 WITH HEADER LINE,
      gt_fcat       TYPE lvc_t_fcat,
      gs_fcat       TYPE lvc_s_fcat,
      gs_layout     TYPE lvc_s_layo,
      ls_data       TYPE zbk_s_001,
      gv_active_tab TYPE string,
      gv_tcode1     TYPE tcode VALUE 'ZBK_001',
      gv_tcode2     TYPE tcode VALUE 'ZBK_002',
      lt_htable     TYPE STANDARD TABLE OF zbk_patient_t001 WITH HEADER LINE,
      ls_htable     TYPE zbk_patient_t001,
      lt_itable     TYPE STANDARD TABLE OF zbk_visit_t001 WITH HEADER LINE,
      ls_itable     TYPE zbk_visit_t001.

SELECTION-SCREEN BEGIN OF TABBED BLOCK tab FOR 10 LINES.
  SELECTION-SCREEN TAB (20) tab_tab1 USER-COMMAND tab1 DEFAULT SCREEN 1001.
  SELECTION-SCREEN TAB (20) tab_tab2 USER-COMMAND tab2 DEFAULT SCREEN 1002.
SELECTION-SCREEN END OF BLOCK tab.

SELECTION-SCREEN BEGIN OF SCREEN 1001 AS SUBSCREEN.
  PARAMETERS: P_patid TYPE zbk_patient_t001-patient_id,
              p_visid TYPE zbk_visit_t001-visit_id.
SELECTION-SCREEN END OF SCREEN 1001.
SELECTION-SCREEN BEGIN OF SCREEN 1002 AS SUBSCREEN.
  PARAMETERS: P_fname TYPE localfile .
SELECTION-SCREEN END OF SCREEN 1002.

INITIALIZATION.
  tab_tab1 = 'Tab1'.
  tab_tab2 = 'Tab2'.

AT SELECTION-SCREEN.

START-OF-SELECTION.
  IF tab-activetab = 'TAB1' AND p_patid IS NOT INITIAL AND p_visid IS NOT INITIAL.
    SELECT
        zbk_patient_t001~patient_id    AS patient_id
        zbk_patient_t001~first_name    AS first_name
        zbk_patient_t001~last_name     AS last_name
        zbk_patient_t001~gender        AS gender
        zbk_patient_t001~birth_date    AS birth_date
        zbk_patient_t001~address       AS address
        zbk_patient_t001~phone_number  AS phone_number
        zbk_patient_t001~email         AS email
        zbk_patient_t001~blood_type    AS blood_type
        zbk_visit_t001~visit_id        AS visit_id
        zbk_visit_t001~visit_date      AS visit_date
        zbk_visit_t001~doctor_name     AS doctor_name
        INTO TABLE gt_data
        FROM zbk_patient_t001
        INNER JOIN zbk_visit_t001
           ON zbk_visit_t001~patient_id
    EQ zbk_patient_t001~patient_id
      WHERE zbk_patient_t001~patient_id = p_patid
    AND zbk_visit_t001~visit_id = p_visid.



    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name       = 'ZBK_S_001'
        i_client_never_display = 'X'
      CHANGING
        ct_fieldcat            = gt_fcat
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.
    IF sy-subrc <> 0.

    ENDIF.

    LOOP AT gt_fcat INTO gs_fcat.
      CASE gs_fcat-fieldname.
        WHEN 'ADDRESS'.
          gs_fcat-outputlen = 40.
        WHEN 'GENDER'.
          gs_fcat-outputlen = 10.
        WHEN 'EMAIL'.
          gs_fcat-outputlen = 25.
        WHEN 'PHONE_NUMBER'.
          gs_fcat-outputlen = 25.
      ENDCASE.

      MODIFY gt_fcat FROM gs_fcat TRANSPORTING outputlen.
    ENDLOOP.


    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
      EXPORTING
        i_callback_program       = sy-repid
        i_callback_pf_status_set = 'PF_STATUS_SET'
        i_callback_user_command  = 'USER_COMMAND'
        is_layout_lvc            = gs_layout
        it_fieldcat_lvc          = gt_fcat
        i_default                = 'X'
        i_save                   = ' '
      TABLES
        t_outtab                 = gt_data
      EXCEPTIONS
        program_error            = 1
        OTHERS                   = 2.
    IF sy-subrc <> 0.

    ENDIF.
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fname.
  PERFORM f4_fname.

  IF tab-activetab = 'TAB2' AND p_fname IS NOT INITIAL.
    PERFORM upload_data.
  ELSE.
    MESSAGE  'Data not Found!' TYPE 'S'.
  ENDIF.
* &---------------------------------------------------------------------
*&      Form  f4_fname
* &---------------------------------------------------------------------
*       text
* ----------------------------------------------------------------------
FORM f4_fname .
  DATA: file_table TYPE filetable,
        file_line  TYPE file_table,
        rc         TYPE i.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      default_extension       = 'xlsx'
    CHANGING
      file_table              = file_table
      rc                      = rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.

  READ TABLE file_table INTO file_line INDEX 1.
  IF sy-subrc = 0.
    p_fname = file_line-filename.
  ENDIF.
ENDFORM.

"f4_fname

* &---------------------------------------------------------------------
* &      Form  upload_data
* &---------------------------------------------------------------------
*       text
* ----------------------------------------------------------------------
FORM upload_data .
  DATA:lt_file  LIKE alsmex_tabline OCCURS 0 WITH HEADER LINE.

  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = p_fname
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 12
      i_end_row               = 1000
    TABLES
      intern                  = lt_file
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.


  IF sy-subrc NE 0 OR lt_file[] IS INITIAL.
    MESSAGE 'Dosya Okunamadı !' TYPE 'I'.
  ELSE.
    REFRESH gt_data.
    LOOP AT lt_file.
      CASE lt_file-col.
        WHEN '0001'.
          MOVE lt_file-value TO gt_data-patient_id.
        WHEN '0002'.
          MOVE lt_file-value TO gt_data-first_name.
        WHEN '0003'.
          MOVE lt_file-value TO gt_data-last_name.
        WHEN '0004'.
          MOVE lt_file-value TO gt_data-gender.
        WHEN '0005'.
          MOVE lt_file-value TO gt_data-birth_date.
        WHEN '0006'.
          MOVE lt_file-value TO gt_data-address.
        WHEN '0007'.
          MOVE lt_file-value TO gt_data-phone_number.
        WHEN '0008'.
          MOVE lt_file-value TO gt_data-email.
        WHEN '0009'.
          MOVE lt_file-value TO gt_data-blood_type.
        WHEN '0010'.
          MOVE lt_file-value TO gt_data-visit_id.
        WHEN '0011'.
          MOVE lt_file-value TO gt_data-visit_date.
        WHEN '0012'.
          MOVE lt_file-value TO gt_data-doctor_name.
      ENDCASE.
      AT END OF row.
        APPEND gt_data.
        CLEAR gt_data.
      ENDAT.
    ENDLOOP.
  ENDIF.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZBK_S_001'
      i_client_never_display = 'X'
    CHANGING
      ct_fieldcat            = gt_fcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
    " Hata yönetimi
  ENDIF.


  LOOP AT gt_fcat INTO gs_fcat.
    CASE gs_fcat-fieldname.
      WHEN 'ADDRESS'.
        gs_fcat-outputlen = 40.
      WHEN 'GENDER'.
        gs_fcat-outputlen = 10.
      WHEN 'EMAIL'.
        gs_fcat-outputlen = 25.
      WHEN 'PHONE_NUMBER'.
        gs_fcat-outputlen = 25.
    ENDCASE.

    MODIFY gt_fcat FROM gs_fcat TRANSPORTING outputlen.
  ENDLOOP.



  " Adım 5: ALV Grid ekranını görüntüleme
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'PF_STATUS_SET'
      i_callback_user_command  = 'USER_COMMAND'
      is_layout_lvc            = gs_layout
      it_fieldcat_lvc          = gt_fcat
      i_default                = 'X'
      i_save                   = ' '
    TABLES
      t_outtab                 = gt_data.

  IF sy-subrc <> 0.
    " Hata yönetimi
  ENDIF.

ENDFORM.


FORM pf_status_set USING p_extab TYPE slis_t_extab.
  SET PF-STATUS 'ZSTANDARD3'.
ENDFORM.

FORM user_command USING r_ucomm     LIKE sy-ucomm
                        rs_selfield TYPE slis_selfield.

  DATA : lv_message TYPE char200.
  CONCATENATE sy-ucomm
              'butonuna basılmıştır.'
              INTO lv_message
              SEPARATED BY space.
  MESSAGE lv_message TYPE 'I'.

  CASE r_ucomm.
    WHEN '&BACK'.
      LEAVE TO SCREEN 0.
    WHEN '&EXIT'.
      LEAVE TO SCREEN 0.
    WHEN '&BUTTON1'.
      PERFORM save_data.
    WHEN '&TCODE1'.
      PERFORM run_tcode1.
    WHEN '&TCODE2'.
      PERFORM run_tcode2.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.


FORM save_data.

  LOOP AT gt_data INTO ls_data.
    MOVE-CORRESPONDING ls_data TO ls_htable.
    APPEND ls_htable TO lt_htable.
  ENDLOOP.

  LOOP AT gt_data INTO ls_data.
    MOVE-CORRESPONDING ls_data TO ls_itable.
    APPEND ls_itable TO lt_itable.
  ENDLOOP.

  MODIFY zbk_patient_t001 FROM TABLE lt_htable[].
  MODIFY zbk_visit_t001 FROM TABLE lt_itable[].

ENDFORM.

FORM run_tcode1.
  CALL TRANSACTION gv_tcode1.
ENDFORM.

FORM run_tcode2.
  CALL TRANSACTION gv_tcode2.
ENDFORM.